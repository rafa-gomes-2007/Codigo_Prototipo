//Bibliotecas
#include <SPI.h>             
#define USE_SDFAT
#include <SdFat.h>           // Use the SdFat library
SdFatSoftSpi<12, 11, 13> SD; //Bit-Bang on the Shield pins

#include <Adafruit_GFX.h>    // Hardware-specific library
#include <MCUFRIEND_kbv.h>  // MCUFRIEND library
MCUFRIEND_kbv tft;

#define SD_CS     10
#define NAMEMATCH ""         
#define PALETTEDEPTH   8     
#define BMPIMAGEOFFSET 54
#define BUFFPIXEL      20

char namebuf[32] = "/";
File root;
int pathlen;

//Variaveis
int b = 22;
int b1 = 24;
int b2 = 26;
int b3 = 28;



//CORES
uint16_t AZUL = 0x0010;
uint16_t AZUL1 = 0x16D0;
uint16_t AZUL2 = 0x1BD4;
uint16_t AZUL3 = 0x24B8;
uint16_t AZUL4 = 0x35DC;
uint16_t AZUL5 = 0x4EDE;
uint16_t AZUL6 = 0x7BDE;
uint16_t AZUL7 = 0xF77F;
uint16_t AZUL8 = 0xFFFF;
#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

void setup()
{
    uint16_t ID;
    Serial.begin(9600);
    Serial.print("Show BMP files on TFT with ID:0x");
    ID = tft.readID();
    Serial.println(ID, HEX);
    if (ID == 0x0D3D3) ID = 0x9481;
    tft.begin(ID);
    tft.fillScreen(WHITE);
    tft.setTextColor(0xFFFF, 0x0000);
    bool good = SD.begin(SD_CS);
    if (!good) {
        Serial.print(F("cannot start SD"));
        while (1);
    }
    root = SD.open(namebuf);
    pathlen = strlen(namebuf);
    pinMode(b, INPUT_PULLUP);
    pinMode(b1, INPUT_PULLUP);
    pinMode(b2, INPUT_PULLUP);
    pinMode(b3, INPUT_PULLUP);
    Tela1();    
}

void loop()
{
  int Vb = !digitalRead(b);
  int Vb1 = !digitalRead(b1);
  int Vb2 = !digitalRead(b2);
  int Vb3 = !digitalRead(b3);

  //Este if chama a funcionalidade das imagens
  if (Vb == 1) {
    imagens();
  }
  //Este if chama a funcionalidade do exercicio de respiração
  if (Vb1 == 1) {
    respiracao();
  }  
  //Este if chama a tela inicial
  if (Vb2 == 1) {
    Tela1();
  } 
  //Este if desliga a tela
  if (Vb3 == 1) {
    tft.fillScreen(BLACK);
  }   
}

//Tela inicial
void Tela1() {
  tft.setRotation(3);
  tft.fillScreen(BLACK);  


  int retangulo_largura = 300;
  int retangulo_altura = 220;


  int x = (tft.width() / 2) - (retangulo_largura / 2);
  int y = (tft.height() / 2) - (retangulo_altura / 2);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(40, 80);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("DISPOSITIVO DE AJUDA");
  
  tft.setCursor(30, 120);
  tft.setTextColor(BLACK);
  tft.setTextSize(2);
  tft.print("REPETITIVA PSICOLOGICA"); 
}


//EXECICIO DE RESPIRAÇÃO
void respiracao() {
  tft.setRotation(3);
  tft.fillScreen(BLACK);  

  int retangulo_largura = 300;
  int retangulo_altura = 220;

  int x = (tft.width() / 2) - (retangulo_largura / 2);
  int y = (tft.height() / 2) - (retangulo_altura / 2);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(55, 100);
  tft.setTextColor(AZUL);
  tft.setTextSize(5);
  tft.print("RESPIRE");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL1);
  tft.setTextSize(10);
  tft.print("4");
  delay(1000);
  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL2);
  tft.setTextSize(10);
  tft.print("3");
  delay(1000);
  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL3);
  tft.setTextSize(10);
  tft.print("2");
  delay(1000);
  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL4);
  tft.setTextSize(10);
  tft.print("1");
  delay(1000);

  // ---------------------------RESPIRAÇÃO
  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 
  tft.setCursor(75, 100);
  tft.setTextColor(AZUL);
  tft.setTextSize(5);
  tft.print("SEGURE");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL1);
  tft.setTextSize(10);
  tft.print("7");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL2);
  tft.setTextSize(10);
  tft.print("6");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL3);
  tft.setTextSize(10);
  tft.print("5");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL4);
  tft.setTextSize(10);
  tft.print("4");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL5);
  tft.setTextSize(10);
  tft.print("3");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL6);
  tft.setTextSize(10);
  tft.print("2");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL7);
  tft.setTextSize(10);
  tft.print("1");
  delay(1000);

  // ---------------------------SEGURAR

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 
  tft.setCursor(75, 100);
  tft.setTextColor(AZUL);
  tft.setTextSize(5);
  tft.print("EXPIRE");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL1);
  tft.setTextSize(10);
  tft.print("8");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL2);
  tft.setTextSize(10);
  tft.print("7");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL3);
  tft.setTextSize(10);
  tft.print("6");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL4);
  tft.setTextSize(10);
  tft.print("5");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL5);
  tft.setTextSize(10);
  tft.print("4");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL6);
  tft.setTextSize(10);
  tft.print("3");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL7);
  tft.setTextSize(10);
  tft.print("2");
  delay(1000);

  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 

  tft.setCursor(135, 90);
  tft.setTextColor(AZUL8);
  tft.setTextSize(10);
  tft.print("1");
  delay(1000);

  // ---------------------------EXPIRE

  // ---------------------------RELAXE
  tft.fillRect(x, y, retangulo_largura, retangulo_altura, WHITE); 
  tft.setCursor(75, 100);
  tft.setTextColor(AZUL);
  tft.setTextSize(5);
  tft.print("RELAXE");
  delay(1000);

  Tela1();
}

//IMAGENS DA NATUREZA
void imagens() {
  tft.fillScreen(BLACK);
  tft.setRotation(2);
  showBMP("img1.bmp", 0, 0);
  delay(500);
  showBMP("img2.bmp", 0, 0);
  delay(500);
  showBMP("img3.bmp", 0, 0);
  delay(500);
  showBMP("img4.bmp", 0, 0);
  delay(500);
  showBMP("img5.bmp", 0, 0);
  delay(500);
  showBMP("img6.bmp", 0, 0);
  delay(500);
  Tela1();
}

//DAQUI PARA BAIXO É BIBLIOTECA
uint16_t read16(File& f) {
    uint16_t result;         // read little-endian
    f.read(&result, sizeof(result));
    return result;
}

uint32_t read32(File& f) {
    uint32_t result;
    f.read(&result, sizeof(result));
    return result;
}

uint8_t showBMP(char *nm, int x, int y)
{
    File bmpFile;
    int bmpWidth, bmpHeight;    // W+H in pixels
    uint8_t bmpDepth;           // Bit depth (currently must be 24, 16, 8, 4, 1)
    uint32_t bmpImageoffset;    // Start of image data in file
    uint32_t rowSize;           // Not always = bmpWidth; may have padding
    uint8_t sdbuffer[3 * BUFFPIXEL];    // pixel in buffer (R+G+B per pixel)
    uint16_t lcdbuffer[(1 << PALETTEDEPTH) + BUFFPIXEL], *palette = NULL;
    uint8_t bitmask, bitshift;
    boolean flip = true;        // BMP is stored bottom-to-top
    int w, h, row, col, lcdbufsiz = (1 << PALETTEDEPTH) + BUFFPIXEL, buffidx;
    uint32_t pos;               // seek position
    boolean is565 = false;      //

    uint16_t bmpID;
    uint16_t n;                 // blocks read
    uint8_t ret;

    if ((x >= tft.width()) || (y >= tft.height()))
        return 1;               // off screen

    bmpFile = SD.open(nm);      // Parse BMP header
    bmpID = read16(bmpFile);    // BMP signature
    (void) read32(bmpFile);     // Read & ignore file size
    (void) read32(bmpFile);     // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile);       // Start of image data
    (void) read32(bmpFile);     // Read & ignore DIB header size
    bmpWidth = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    n = read16(bmpFile);        // # planes -- must be '1'
    bmpDepth = read16(bmpFile); // bits per pixel
    pos = read32(bmpFile);      // format
    if (bmpID != 0x4D42) ret = 2; // bad ID
    else if (n != 1) ret = 3;   // too many planes
    else if (pos != 0 && pos != 3) ret = 4; // format: 0 = uncompressed, 3 = 565
    else if (bmpDepth < 16 && bmpDepth > PALETTEDEPTH) ret = 5; // palette 
    else {
        bool first = true;
        is565 = (pos == 3);               // ?already in 16-bit format
        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * bmpDepth / 8 + 3) & ~3;
        if (bmpHeight < 0) {              // If negative, image is in top-down order.
            bmpHeight = -bmpHeight;
            flip = false;
        }

        w = bmpWidth;
        h = bmpHeight;
        if ((x + w) >= tft.width())       // Crop area to be loaded
            w = tft.width() - x;
        if ((y + h) >= tft.height())      //
            h = tft.height() - y;

        if (bmpDepth <= PALETTEDEPTH) {   // these modes have separate palette
            //bmpFile.seek(BMPIMAGEOFFSET); //palette is always @ 54
            bmpFile.seek(bmpImageoffset - (4<<bmpDepth)); //54 for regular, diff for colorsimportant
            bitmask = 0xFF;
            if (bmpDepth < 8)
                bitmask >>= bmpDepth;
            bitshift = 8 - bmpDepth;
            n = 1 << bmpDepth;
            lcdbufsiz -= n;
            palette = lcdbuffer + lcdbufsiz;
            for (col = 0; col < n; col++) {
                pos = read32(bmpFile);    //map palette to 5-6-5
                palette[col] = ((pos & 0x0000F8) >> 3) | ((pos & 0x00FC00) >> 5) | ((pos & 0xF80000) >> 8);
            }
        }

        // Set TFT address window to clipped image bounds
        tft.setAddrWindow(x, y, x + w - 1, y + h - 1);
        for (row = 0; row < h; row++) { // For each scanline...
            // Seek to start of scan line.  It might seem labor-
            // intensive to be doing this on every line, but this
            // method covers a lot of gritty details like cropping
            // and scanline padding.  Also, the seek only takes
            // place if the file position actually needs to change
            // (avoids a lot of cluster math in SD library).
            uint8_t r, g, b, *sdptr;
            int lcdidx, lcdleft;
            if (flip)   // Bitmap is stored bottom-to-top order (normal BMP)
                pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
            else        // Bitmap is stored top-to-bottom
                pos = bmpImageoffset + row * rowSize;
            if (bmpFile.position() != pos) { // Need seek?
                bmpFile.seek(pos);
                buffidx = sizeof(sdbuffer); // Force buffer reload
            }

            for (col = 0; col < w; ) {  //pixels in row
                lcdleft = w - col;
                if (lcdleft > lcdbufsiz) lcdleft = lcdbufsiz;
                for (lcdidx = 0; lcdidx < lcdleft; lcdidx++) { // buffer at a time
                    uint16_t color;
                    // Time to read more pixel data?
                    if (buffidx >= sizeof(sdbuffer)) { // Indeed
                        bmpFile.read(sdbuffer, sizeof(sdbuffer));
                        buffidx = 0; // Set index to beginning
                        r = 0;
                    }
                    switch (bmpDepth) {          // Convert pixel from BMP to TFT format
                        case 24:
                            b = sdbuffer[buffidx++];
                            g = sdbuffer[buffidx++];
                            r = sdbuffer[buffidx++];
                            color = tft.color565(r, g, b);
                            break;
                        case 16:
                            b = sdbuffer[buffidx++];
                            r = sdbuffer[buffidx++];
                            if (is565)
                                color = (r << 8) | (b);
                            else
                                color = (r << 9) | ((b & 0xE0) << 1) | (b & 0x1F);
                            break;
                        case 1:
                        case 4:
                        case 8:
                            if (r == 0)
                                b = sdbuffer[buffidx++], r = 8;
                            color = palette[(b >> bitshift) & bitmask];
                            r -= bmpDepth;
                            b <<= bmpDepth;
                            break;
                    }
                    lcdbuffer[lcdidx] = color;

                }
                tft.pushColors(lcdbuffer, lcdidx, first);
                first = false;
                col += lcdidx;
            }           // end cols
        }               // end rows
        tft.setAddrWindow(0, 0, tft.width() - 1, tft.height() - 1); //restore full screen
        ret = 0;        // good render
    }
    bmpFile.close();
    return (ret);
}